#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ README —Ñ–∞–π–ª–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏: argostranslate (–ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏) –∏ LibreTranslate API
"""

import os
import sys
import re
import time
from pathlib import Path
from typing import Optional

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å argostranslate (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
try:
    import argostranslate.package
    import argostranslate.translate
    ARGOS_AVAILABLE = True
except ImportError:
    ARGOS_AVAILABLE = False

# Fallback –Ω–∞ requests –¥–ª—è API –º–µ—Ç–æ–¥–æ–≤
try:
    import requests
    REQUESTS_AVAILABLE = True
except ImportError:
    REQUESTS_AVAILABLE = False

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —è–∑—ã–∫–æ–≤
LANGUAGE_CODES = {
    'en': 'English',
    'ru': 'Russian (–†—É—Å—Å–∫–∏–π)',
    'zh-CN': 'Simplified Chinese (ÁÆÄ‰Ωì‰∏≠Êñá)',
    'es': 'Spanish (Espa√±ol)'
}

# –ú–∞–ø–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤ –¥–ª—è argostranslate (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–¥—ã ISO)
ARGOS_LANGUAGE_MAP = {
    'en': 'en',
    'ru': 'ru',
    'zh-CN': 'zh',  # argostranslate –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'zh' –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ
    'es': 'es'
}

README_FILES = {
    'en': 'README.md',
    'ru': 'README.ru.md',
    'zh-CN': 'README.zh-CN.md',
    'es': 'README.es.md'
}

# –ü—É–±–ª–∏—á–Ω—ã–µ LibreTranslate —Å–µ—Ä–≤–µ—Ä—ã (fallback)
LIBRETRANSLATE_SERVERS = [
    'https://translate.argosopentech.com',
    'https://libretranslate.de',
]

def install_argos_language_pair(from_code: str, to_code: str) -> bool:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è argostranslate"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –ø–∞—Ä–∞
        installed_languages = argostranslate.translate.get_installed_languages()
        if any(lang.code == to_code for lang in installed_languages):
            print(f"   ‚úì –Ø–∑—ã–∫–æ–≤–∞—è –ø–∞—Ä–∞ {from_code} ‚Üí {to_code} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return True
        
        print(f"   üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–æ–≤–æ–π –ø–∞—Ä—ã: {from_code} ‚Üí {to_code}")
        argostranslate.package.update_package_index()
        available_packages = argostranslate.package.get_available_packages()
        
        package_to_install = next(
            (pkg for pkg in available_packages 
             if pkg.from_code == from_code and pkg.to_code == to_code),
            None
        )
        
        if package_to_install:
            argostranslate.package.install_from_path(package_to_install.download())
            print(f"   ‚úÖ –Ø–∑—ã–∫–æ–≤–∞—è –ø–∞—Ä–∞ {from_code} ‚Üí {to_code} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return True
        else:
            print(f"   ‚ö†Ô∏è  –Ø–∑—ã–∫–æ–≤–∞—è –ø–∞—Ä–∞ {from_code} ‚Üí {to_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö")
            return False
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {from_code} ‚Üí {to_code}: {e}")
        return False

def translate_with_argos(text: str, target_lang: str, source_lang: str = 'en') -> Optional[str]:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é argostranslate (–ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏)"""
    if not ARGOS_AVAILABLE:
        return None
    
    try:
        from_code = ARGOS_LANGUAGE_MAP.get(source_lang, source_lang)
        to_code = ARGOS_LANGUAGE_MAP.get(target_lang, target_lang)
        
        # –ó–∞—â–∏—â–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º
        protected_text, placeholders = protect_technical_elements(text)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫–æ–≤—É—é –ø–∞—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            translated = argostranslate.translate.translate(protected_text, from_code, to_code)
        except Exception:
            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫–æ–≤—É—é –ø–∞—Ä—É
            if install_argos_language_pair(from_code, to_code):
                translated = argostranslate.translate.translate(protected_text, from_code, to_code)
            else:
                return None
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        result = restore_technical_elements(translated, placeholders)
        return result
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ argostranslate: {e}")
        return None

def translate_with_libretranslate(text: str, target_lang: str, source_lang: str = 'en') -> Optional[str]:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é LibreTranslate API (fallback)"""
    if not REQUESTS_AVAILABLE:
        return None
    
    # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è LibreTranslate
    libretranslate_map = {
        'en': 'en',
        'ru': 'ru',
        'zh-CN': 'zh',
        'es': 'es'
    }
    
    from_code = libretranslate_map.get(source_lang, source_lang)
    to_code = libretranslate_map.get(target_lang, target_lang)
    
    # –ó–∞—â–∏—â–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º
    protected_text, placeholders = protect_technical_elements(text)
    
    for server in LIBRETRANSLATE_SERVERS:
        try:
            print(f"   üåê –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ LibreTranslate: {server}")
            response = requests.post(
                f"{server}/translate",
                json={
                    "q": protected_text,
                    "source": from_code,
                    "target": to_code,
                    "format": "text"
                },
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                translated = result.get("translatedText", "")
                if translated:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    result_text = restore_technical_elements(translated, placeholders)
                    print(f"   ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ LibreTranslate")
                    return result_text
            else:
                print(f"   ‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä {server} –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ {server}: {e}")
            continue
    
    return None

def protect_technical_elements(text: str):
    """
    –ó–∞—â–∏—â–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞, –∑–∞–º–µ–Ω—è—è –∏—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É—Å—Ç–æ–π—á–∏–≤—ã–µ –∫ –ø–µ—Ä–µ–≤–æ–¥—É –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ —Ü–∏—Ñ—Ä—ã)
    
    Returns:
        Tuple (protected_text, placeholders_dict)
    """
    placeholders = {}
    protected_text = text
    counter = 0
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º UUID-–ø–æ–¥–æ–±–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã
    # –§–æ—Ä–º–∞—Ç: XA1234B, XC5678D –∏ —Ç.–¥. - –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–µ –±—É–¥–µ—Ç –∏—Ö –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
    
    # –ó–∞—â–∏—â–∞–µ–º code blocks (—Å–∞–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π - –æ–Ω–∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å—ë)
    code_block_pattern = r'```[\s\S]*?```'
    matches = list(re.finditer(code_block_pattern, protected_text))
    for match in reversed(matches):  # –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —á—Ç–æ–±—ã –Ω–µ —Å–¥–≤–∏–≥–∞–ª–∏—Å—å –∏–Ω–¥–µ–∫—Å—ã
        placeholder = f"XA{str(counter).zfill(4)}B"
        placeholders[placeholder] = match.group(0)
        start, end = match.span()
        protected_text = protected_text[:start] + placeholder + protected_text[end:]
        counter += 1
    
    # –ó–∞—â–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ [text](url) - –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    link_pattern = r'\[([^\]]+)\]\(([^\)]+)\)'
    matches = list(re.finditer(link_pattern, protected_text))
    for match in reversed(matches):
        placeholder = f"XC{str(counter).zfill(4)}D"
        placeholders[placeholder] = match.group(0)
        start, end = match.span()
        protected_text = protected_text[:start] + placeholder + protected_text[end:]
        counter += 1
    
    # –ó–∞—â–∏—â–∞–µ–º inline code (–Ω–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ code blocks)
    inline_code_pattern = r'(?<!`)`([^`\n]+)`(?!`)'
    matches = list(re.finditer(inline_code_pattern, protected_text))
    for match in reversed(matches):
        placeholder = f"XE{str(counter).zfill(4)}F"
        placeholders[placeholder] = match.group(0)
        start, end = match.span()
        protected_text = protected_text[:start] + placeholder + protected_text[end:]
        counter += 1
    
    # –ó–∞—â–∏—â–∞–µ–º URLs (–Ω–æ –Ω–µ –≤–Ω—É—Ç—Ä–∏ —Å—Å—ã–ª–æ–∫ –∏–ª–∏ code blocks)
    url_pattern = r'(?<!\]\()https?://[^\s\)<>]+'
    matches = list(re.finditer(url_pattern, protected_text))
    for match in reversed(matches):
        placeholder = f"XG{str(counter).zfill(4)}H"
        placeholders[placeholder] = match.group(0)
        start, end = match.span()
        protected_text = protected_text[:start] + placeholder + protected_text[end:]
        counter += 1
    
    # –ó–∞—â–∏—â–∞–µ–º HTML —Ç–µ–≥–∏ –∏ –∞—Ç—Ä–∏–±—É—Ç—ã
    html_pattern = r'<[^>]+>'
    matches = list(re.finditer(html_pattern, protected_text))
    for match in reversed(matches):
        placeholder = f"XI{str(counter).zfill(4)}J"
        placeholders[placeholder] = match.group(0)
        start, end = match.span()
        protected_text = protected_text[:start] + placeholder + protected_text[end:]
        counter += 1
    
    return protected_text, placeholders

def restore_technical_elements(translated_text: str, placeholders: dict[str, str]) -> str:
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    result = translated_text
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –¥–ª–∏–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–≤
    # (—á—Ç–æ–±—ã –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏)
    sorted_placeholders = sorted(placeholders.items(), key=lambda x: -len(x[0]))
    
    for placeholder, original in sorted_placeholders:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if placeholder in result:
            result = result.replace(placeholder, original)
            continue
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, XA1234B -> 1234)
        num_match = re.search(r'\d+', placeholder)
        if not num_match:
            continue
        
        placeholder_num = num_match.group()
        placeholder_prefix = placeholder[:2]  # XA, XC, XE –∏ —Ç.–¥.
        placeholder_suffix = placeholder[-1]   # B, D, F –∏ —Ç.–¥.
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–∫–∞–∂–µ–Ω–∏—è
        patterns = [
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            placeholder,
            # –° –ø—Ä–æ–±–µ–ª–∞–º–∏: XA 1234 B, XA1234 B, XA 1234B
            f"{placeholder_prefix}\\s*{placeholder_num}\\s*{placeholder_suffix}",
            f"{placeholder_prefix}{placeholder_num}\\s+{placeholder_suffix}",
            f"{placeholder_prefix}\\s+{placeholder_num}{placeholder_suffix}",
            # –†–∞–∑–¥–µ–ª–µ–Ω–æ: X A 1234 B
            f"{placeholder_prefix[0]}\\s*{placeholder_prefix[1]}\\s*{placeholder_num}\\s*{placeholder_suffix}",
            # –†–∞–∑–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã
            placeholder.upper(),
            placeholder.lower(),
            # –ë–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞/—Å—É—Ñ—Ñ–∏–∫—Å–∞: 1234, A1234, 1234B
            placeholder_num,
            f"{placeholder_prefix[1]}{placeholder_num}",
            f"{placeholder_num}{placeholder_suffix}",
        ]
        
        found = False
        for pattern in patterns:
            # –ò—â–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            matches = list(re.finditer(pattern, result, re.IGNORECASE))
            if matches:
                # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª
                # –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—à –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä (–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä)
                for match in reversed(matches):
                    matched_text = match.group()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –µ—Å—Ç—å –Ω–∞—à –Ω–æ–º–µ—Ä
                    if placeholder_num in matched_text:
                        start, end = match.span()
                        result = result[:start] + original + result[end:]
                        found = True
        
        if not found:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≥–¥–µ –µ—Å—Ç—å –Ω–∞—à –Ω–æ–º–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            context_pattern = rf'\b{placeholder_prefix[0]}[A-Za-z]?\s*{placeholder_num}\s*[A-Za-z]?\b'
            matches = list(re.finditer(context_pattern, result))
            if matches and len(matches) <= len(placeholders):  # –ù–µ –∑–∞–º–µ–Ω—è–µ–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
                match = matches[0]
                start, end = match.span()
                result = result[:start] + original + result[end:]
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {placeholder} (–æ—Ä–∏–≥–∏–Ω–∞–ª: {original[:50]}...)")
    
    return result

def translate_text(text: str, target_language: str, source_language: str = 'en') -> Optional[str]:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏
    –ü—Ä–æ–±—É–µ—Ç argostranslate -> LibreTranslate API
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        target_language: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (en, ru, zh-CN)
        source_language: –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é en)
    
    Returns:
        –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    print(f"   üîÑ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–≤–æ–¥–∞...")
    
    # –ú–µ—Ç–æ–¥ 1: argostranslate (–ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏, —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π)
    if ARGOS_AVAILABLE:
        print(f"   üìö –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ argostranslate...")
        translated = translate_with_argos(text, target_language, source_language)
        if translated:
            print(f"   ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ argostranslate ({len(translated)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return translated
    
    # –ú–µ—Ç–æ–¥ 2: LibreTranslate API (fallback)
    if REQUESTS_AVAILABLE:
        print(f"   üåê –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ LibreTranslate API...")
        translated = translate_with_libretranslate(text, target_language, source_language)
        if translated:
            print(f"   ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ LibreTranslate ({len(translated)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return translated
    
    print(f"   ‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å")
    return None

def sync_translations(source_lang='en', target_langs=None):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã README —Ñ–∞–π–ª–æ–≤
    
    Args:
        source_lang: –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é en)
        target_langs: –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —è–∑—ã–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ['ru', 'zh-CN'])
    
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if target_langs is None:
        target_langs = ['ru', 'zh-CN', 'es']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    repo_root = Path(__file__).parent.parent
    source_file = repo_root / README_FILES[source_lang]
    
    if not source_file.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {source_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"\nüìñ –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {source_file}")
    with open(source_file, 'r', encoding='utf-8') as f:
        source_text = f.read()
    
    print(f"   –†–∞–∑–º–µ—Ä: {len(source_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    success_count = 0
    
    for target_lang in target_langs:
        if target_lang == source_lang:
            print(f"\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ {target_lang} (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º —è–∑—ã–∫–æ–º)")
            continue
        
        target_file = repo_root / README_FILES[target_lang]
        
        print(f"\nüåç –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {LANGUAGE_CODES[target_lang]}...")
        print(f"   –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: {target_file}")
        
        translated = translate_text(source_text, target_lang, source_lang)
        
        if translated:
            print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞...")
            with open(target_file, 'w', encoding='utf-8') as f:
                f.write(translated)
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω {target_file}")
            success_count += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è {target_lang}")
    
    print(f"\n{'='*60}")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count}/{len(target_langs)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    return success_count > 0

if __name__ == '__main__':
    print("="*60)
    print("üåç –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ README")
    print("="*60)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    source = os.getenv('SOURCE_LANG', 'en')
    targets_str = os.getenv('TARGET_LANGS', 'ru,zh-CN,es')
    targets = [t.strip() for t in targets_str.split(',') if t.strip()]
    
    print(f"\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫: {LANGUAGE_CODES.get(source, source)}")
    print(f"   –¶–µ–ª–µ–≤—ã–µ —è–∑—ã–∫–∏: {', '.join([LANGUAGE_CODES.get(t, t) for t in targets])}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤
    if not ARGOS_AVAILABLE and not REQUESTS_AVAILABLE:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   pip install argostranslate requests")
        sys.exit(1)
    
    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö
    methods = []
    if ARGOS_AVAILABLE:
        methods.append("argostranslate (–ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏)")
    if REQUESTS_AVAILABLE:
        methods.append("LibreTranslate API (–ø—É–±–ª–∏—á–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã)")
    print(f"\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞: {', '.join(methods)}")
    
    # –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    success = sync_translations(source, targets)
    
    if success:
        print("\n‚ú® –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        sys.exit(0)
    else:
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ")
        sys.exit(1)


name: Auto-Translate READMEs

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ README.md –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫–∏
# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ README.md —Ñ–∞–π–ª–∞

on:
  push:
    branches:
      - main
    paths:
      - 'README.md'
  workflow_dispatch:
    inputs:
      source_language:
        description: 'Source language (en, ru, zh-CN)'
        required: true
        default: 'en'
        type: choice
        options:
          - en
          - ru
          - zh-CN
      target_languages:
        description: 'Target languages (comma-separated: en,ru,zh-CN)'
        required: true
        default: 'ru,zh-CN'

jobs:
  translate-readmes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai anthropic requests python-dotenv pyyaml
      
      - name: Create translation script
        run: |
          mkdir -p scripts
          cat > scripts/translate_readmes.py << 'EOF'
#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ README —Ñ–∞–π–ª–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI API –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
import re
from pathlib import Path

try:
    import openai
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É openai")
    print("   pip install openai")
    sys.exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —è–∑—ã–∫–æ–≤
LANGUAGE_CODES = {
    'en': 'English',
    'ru': 'Russian (–†—É—Å—Å–∫–∏–π)',
    'zh-CN': 'Simplified Chinese (ÁÆÄ‰Ωì‰∏≠Êñá)'
}

README_FILES = {
    'en': 'README.md',
    'ru': 'README.ru.md',
    'zh-CN': 'README.zh-CN.md'
}

def translate_text(text, target_language, source_language='en'):
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OpenAI API
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        target_language: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (en, ru, zh-CN)
        source_language: –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é en)
    
    Returns:
        –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        print("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ GitHub Secret")
        return None
    
    client = openai.OpenAI(api_key=api_key)
    
    prompt = f"""Translate the following markdown document from {LANGUAGE_CODES[source_language]} to {LANGUAGE_CODES[target_language]}.

CRITICAL RULES - FOLLOW EXACTLY:

1. PRESERVE ALL MARKDOWN FORMATTING:
   - Keep all headers (# ## ###)
   - Keep all links [text](url)
   - Keep all lists (- * 1.)
   - Keep all code blocks ``` ```
   - Keep all emphasis (* ** ___)
   - Keep all tables
   - Keep all HTML tags

2. DO NOT TRANSLATE (keep exactly as is):
   - URLs and hyperlinks (entire https://... addresses)
   - GitHub repository names (e.g., "neovim/neovim")
   - Code blocks and their contents
   - Technical commands (e.g., git commit, npm install)
   - File paths and filenames (e.g., README.md, scripts/translate.py)
   - Tags and labels (e.g., *Tags: Python, Docker, AI*)
   - Programming language names (Python, JavaScript, Rust, etc.)
   - Tool names when they are proper nouns (GitHub, Docker, Kubernetes)
   - Badge URLs and image sources

3. TRANSLATE:
   - All descriptive text and explanations
   - Headers and section titles
   - Paragraphs and sentences
   - List item descriptions (but not the tool names in bold)
   - Table contents (but not code or URLs)

4. SPECIAL HANDLING:
   - For tool descriptions like "**[tool](url)** ‚Äî description", translate ONLY the description part after ‚Äî
   - Keep emoji exactly as they are
   - Preserve line breaks and spacing
   - Keep alignment and indentation

Document to translate:

{text}"""
    
    try:
        print(f"   ü§ñ –í—ã–∑–æ–≤ OpenAI API (–º–æ–¥–µ–ª—å: gpt-4-turbo-preview)...")
        response = client.chat.completions.create(
            model="gpt-4-turbo-preview",
            messages=[
                {
                    "role": "system", 
                    "content": "You are a professional technical translator specializing in software documentation. You preserve ALL markdown formatting, URLs, code blocks, and technical terms exactly as they appear. You translate only natural language text while keeping technical elements untouched."
                },
                {
                    "role": "user", 
                    "content": prompt
                }
            ],
            temperature=0.3,
            max_tokens=16000
        )
        
        translated = response.choices[0].message.content
        print(f"   ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ–ª—É—á–µ–Ω ({len(translated)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return translated
        
    except openai.APIError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def sync_translations(source_lang='en', target_langs=None):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã README —Ñ–∞–π–ª–æ–≤
    
    Args:
        source_lang: –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é en)
        target_langs: –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —è–∑—ã–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ['ru', 'zh-CN'])
    
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if target_langs is None:
        target_langs = ['ru', 'zh-CN']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    repo_root = Path(__file__).parent.parent
    source_file = repo_root / README_FILES[source_lang]
    
    if not source_file.exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {source_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"\nüìñ –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {source_file}")
    with open(source_file, 'r', encoding='utf-8') as f:
        source_text = f.read()
    
    print(f"   –†–∞–∑–º–µ—Ä: {len(source_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    success_count = 0
    
    for target_lang in target_langs:
        if target_lang == source_lang:
            print(f"\n‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ {target_lang} (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º —è–∑—ã–∫–æ–º)")
            continue
        
        target_file = repo_root / README_FILES[target_lang]
        
        print(f"\nüåç –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {LANGUAGE_CODES[target_lang]}...")
        print(f"   –¶–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª: {target_file}")
        
        translated = translate_text(source_text, target_lang, source_lang)
        
        if translated:
            print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞...")
            with open(target_file, 'w', encoding='utf-8') as f:
                f.write(translated)
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω {target_file}")
            success_count += 1
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è {target_lang}")
    
    print(f"\n{'='*60}")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count}/{len(target_langs)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    return success_count > 0

if __name__ == '__main__':
    print("="*60)
    print("üåç –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ README")
    print("="*60)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    source = os.getenv('SOURCE_LANG', 'en')
    targets_str = os.getenv('TARGET_LANGS', 'ru,zh-CN')
    targets = [t.strip() for t in targets_str.split(',') if t.strip()]
    
    print(f"\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫: {LANGUAGE_CODES.get(source, source)}")
    print(f"   –¶–µ–ª–µ–≤—ã–µ —è–∑—ã–∫–∏: {', '.join([LANGUAGE_CODES.get(t, t) for t in targets])}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if not os.getenv('OPENAI_API_KEY'):
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export OPENAI_API_KEY='your-api-key-here'")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    success = sync_translations(source, targets)
    
    if success:
        print("\n‚ú® –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        sys.exit(0)
    else:
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ")
        sys.exit(1)
EOF
          chmod +x scripts/translate_readmes.py
      
      - name: Run translation
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SOURCE_LANG: ${{ github.event.inputs.source_language || 'en' }}
          TARGET_LANGS: ${{ github.event.inputs.target_languages || 'ru,zh-CN' }}
        run: |
          echo "üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–∞..."
          python scripts/translate_readmes.py
      
      - name: Commit and push translations
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          git add README.ru.md README.zh-CN.md
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
          if git diff --staged --quiet; then
            echo "‚ú® –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞"
          else
            echo "üìù –ö–æ–º–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤..."
            git commit -m "üåç chore: auto-update README translations [skip ci]"
            git push
            echo "‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"
          fi
